<templateSet group="redux">
  <template name="reducertest" value="test('$REDUCER_STRING$ reducer $ACTION_STRING$ action', () =&gt; {&#10;  let previousState = $PREVIOUS_STATE$;&#10;  let actionToTest = $ACTION$($PARAMS$);&#10;  let expectedState = $EXPECTED_STATE$;&#10;  expect($REDUCER$(previousState, actionToTest)).toEqual(expectedState);&#10;});" description="Redux Reducer test" toReformat="true" toShortenFQNames="true">
    <variable name="PREVIOUS_STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="EXPECTED_STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="REDUCER" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_STRING" expression="camelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <variable name="REDUCER_STRING" expression="camelCase(REDUCER)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="actiontest" value="test('action creator $METHOD_STRING$', () =&gt; {&#10;  let action = $METHOD$($PARAMS$);&#10;  expect(action).toEqual({&#10;    type: $ACTION$,&#10;    payload: $PARAMS$&#10;  });&#10;});" description="Redux Action Test" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="capitalizeAndUnderscore(METHOD)" defaultValue="" alwaysStopAt="false" />
    <variable name="METHOD_STRING" expression="camelCase(METHOD)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="act" value="export const $ACTION$ = '$KEBAB$';&#10;" description="React Action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEBAB" expression="lowercaseAndDash(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="action" value="export const $ACTION$ = '$PREFIX$/$ACTION$'&#10;&#10;export const $CAMEL$ = data =&gt; ({&#10;  type: $ACTION$, data,&#10;})&#10;" description="Redux Action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PREFIX" expression="regularExpression(fileRelativePath(), &quot;.*[/]([a-z]+?)(?=[/]actions).*&quot;, &quot;$1&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAMEL" expression="camelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="apiact" value="export const $ACTION$_START = '$PREFIX$/$ACTION$'&#10;export const $ACTION$_SUCCESS = '$PREFIX$/$ACTION$'&#10;export const $ACTION$_ERROR = '$PREFIX$/$ACTION$'&#10;&#10;&#10;export const $CAMEL$Start = data =&gt; ({&#10;  type: $ACTION$_START, data,&#10;})&#10;&#10;export const $CAMEL$Success = data =&gt; ({&#10;  type: $ACTION$_SUCCESS, data,&#10;})&#10;&#10;export const $CAMEL$Error = () =&gt; ({&#10;  type: $ACTION$_ERROR,&#10;})&#10;" description="Redux Start, Success, Error Actions" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PREFIX" expression="regularExpression(fileRelativePath(), &quot;.*[/]([a-z]+?)(?=[/]actions).*&quot;, &quot;$1&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="CAMEL" expression="camelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="resel" value="import { createSelector } from 'reselect';&#10;&#10;const $FUNC_NAME$ = createSelector([&#10;  $SELECTOR$,&#10;], (&#10;  $SELECTOR_RETURN$&#10;) =&gt; {&#10;  $END$&#10;});&#10;&#10;export default $FUNC_NAME$;&#10;" description="Create Reselect Selector" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR_RETURN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="presel" value="import { createSelector } from 'reselect';&#10;&#10;const $FUNC_NAME$ = createSelector([&#10;  $SELECTOR$,&#10;  (state, props) =&gt; props?.$PROPS_VAR$,&#10;], (&#10;  $SELECTOR_RETURN$&#10;) =&gt; {&#10;  $END$&#10;});&#10;&#10;export default $FUNC_NAME$;&#10;" description="Create Reselect Selector with props" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PROPS_VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR_RETURN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="res" value="const $FUNC_NAME$ = createSelector([$SELECTOR$,], ($SELECTOR_RETURN$) =&gt; {&#10;  $END$&#10;});&#10;" description="Create Reselect Selector" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR_RETURN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rsg" value="import { all, call, put, takeLatest } from 'redux-saga/effects'&#10;import { axios } from 'helpers'&#10;&#10;import { Api } from './api'&#10;import {  } from './interfaces'&#10;import {&#10;    $ACTION_IMPORT$,&#10;    $ACTION_SUCCESS$,&#10;    $ACTION_ERROR$,&#10;} from './actions'&#10;&#10;function* $ACTION_CREATOR$Saga(action) {&#10;  try {&#10;    const { data } = action&#10;    const response = yield call(axios.get, Api.$END$, data)&#10;&#10;    return yield put($ACTION_SUCCESS$(response))&#10;  } catch (ex) {&#10;    console.error(ex)&#10;&#10;    return yield put($ACTION_ERROR$())&#10;  }&#10;}&#10;&#10;function* $NAME$Saga() {&#10;  yield all([&#10;    takeLatest($ACTION$, $ACTION_CREATOR$Saga),&#10;  ])&#10;}&#10;&#10;export default $NAME$Saga&#10;" description="Create Saga with network request" toReformat="true" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="regularExpression(fileRelativePath(), &quot;.*[/]([a-z]+?)(?=[/]sagas).*&quot;, &quot;$1&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="ACTION_CREATOR" expression="substringBefore(camelCase(ACTION), &quot;Start&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="ACTION_SUCCESS" expression="concat(ACTION_CREATOR, &quot;Success&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="ACTION_ERROR" expression="concat(ACTION_CREATOR, &quot;Error&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="ACTION_IMPORT" expression="ACTION" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="saga" value="import { all, call, put, select, takeLatest } from 'redux-saga/effects'&#10;&#10;function* sagaWorker(action) {&#10;  try {&#10;    const { data } = action&#10;    return yield put(() =&gt; {})&#10;  } catch (ex) {&#10;    console.error(ex)&#10;    return yield put(() =&gt; {})&#10;  }&#10;}&#10;&#10;function* $NAME$() {&#10;  yield all([&#10;    takeLatest([$END$], sagaWorker),&#10;  ])&#10;}&#10;&#10;export default $NAME$&#10;" description="Create saga" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="reducer" value="// import {&#10;&#10;// } from '../actions'&#10;&#10;export interface $INTERFACE_NAME$ {&#10;  [x: string]: any;&#10;}&#10;&#10;const initialState: $INTERFACE_NAME$ = {}&#10;&#10;const $REDUCER_NAME$ = (state = initialState, action): $INTERFACE_NAME$ =&gt; {&#10;  const { type, data } = action&#10;  switch (type) {&#10;    default:&#10;      return state&#10;  }&#10;};&#10;&#10;export default $REDUCER_NAME$&#10;" description="redux reducer" toReformat="false" toShortenFQNames="true">
    <variable name="REDUCER_NAME" expression="concat(regularExpression(fileRelativePath(), &quot;.*[/]([a-z]+?)(?=[/]reducer).*&quot;, &quot;$1&quot;), &quot;Reducer&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="INTERFACE_NAME" expression="capitalize(String)" defaultValue="concat(capitalize(REDUCER_NAME), &quot;State&quot;)" alwaysStopAt="false" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="select" value="import { IApplicationState } from '~/core/reducer';&#10;&#10;/**&#10; * $END$&#10; */&#10;export const $SELECTORNAME$ = (state: IApplicationState) =&gt; {&#10;  state?.$PATH$;&#10;};&#10;" description="Create new selector" toReformat="false" toShortenFQNames="true">
    <variable name="SELECTORNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="wsaga" value="import { call, put, select, takeLatest } from 'redux-saga/effects';&#10;&#10;function* $NAME$(action) {&#10;  try {&#10;    const { data } = action;&#10;    $END$&#10;    return yield put(() =&gt; {});&#10;  } catch (ex) {&#10;    console.error(ex);&#10;    return yield put(() =&gt; {});&#10;  }&#10;}&#10;&#10;export default $NAME$;&#10;" description="Saga Worker" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="worker" value="import {&#10;    $ACTION_IMPORT$_START,&#10;    $ACTION_CREATOR_SUCCESS$,&#10;    $ACTION_CREATOR_ERROR$,&#10;} from './actions'&#10;&#10;function* $ACTION_CREATOR$Saga(action) {&#10;  try {&#10;    const { data } = action&#10;    const response = yield call(axios.get, Api.$END$, data)&#10;&#10;    return yield put($ACTION_CREATOR_SUCCESS$(response))&#10;  } catch (ex) {&#10;    console.error(ex)&#10;&#10;    return yield put($ACTION_CREATOR_ERROR$())&#10;  }&#10;}&#10;" description="Create single Saga worker with network request" toReformat="true" toShortenFQNames="true">
    <variable name="ACTION_CREATOR" expression="substringBefore(camelCase(ACTION), &quot;Start&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="ACTION_CREATOR_SUCCESS" expression="concat(ACTION_CREATOR, &quot;Success&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="ACTION_CREATOR_ERROR" expression="concat(ACTION_CREATOR, &quot;Error&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="ACTION_IMPORT" expression="capitalizeAndUnderscore(ACTION_CREATOR)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>