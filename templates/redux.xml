<templateSet group="redux">
  <template name="reducertest" value="test('$REDUCER_STRING$ reducer $ACTION_STRING$ action', () =&gt; {&#10;  let previousState = $PREVIOUS_STATE$;&#10;  let actionToTest = $ACTION$($PARAMS$);&#10;  let expectedState = $EXPECTED_STATE$;&#10;  expect($REDUCER$(previousState, actionToTest)).toEqual(expectedState);&#10;});" description="Redux Reducer test" toReformat="true" toShortenFQNames="true">
    <variable name="PREVIOUS_STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="EXPECTED_STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="REDUCER" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_STRING" expression="camelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <variable name="REDUCER_STRING" expression="camelCase(REDUCER)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="actiontest" value="test('action creator $METHOD_STRING$', () =&gt; {&#10;  let action = $METHOD$($PARAMS$);&#10;  expect(action).toEqual({&#10;    type: $ACTION$,&#10;    payload: $PARAMS$&#10;  });&#10;});" description="Redux Action Test" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="capitalizeAndUnderscore(METHOD)" defaultValue="" alwaysStopAt="false" />
    <variable name="METHOD_STRING" expression="camelCase(METHOD)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="act" value="export const $ACTION$ = '$KEBAB$';&#10;" description="React Action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEBAB" expression="lowercaseAndDash(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="action" value="export const $ACTION$ = '$END$/$KEBAB$';&#10;&#10;&#10;export const $CAMEL$ = data =&gt; ({&#10;  type: $ACTION$, data,&#10;});" description="Redux Action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEBAB" expression="lowercaseAndDash(ACTION)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAMEL" expression="camelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="apiact" value="export const $ACTION$_START = '$END$/$KEBAB$_START';&#10;export const $ACTION$_SUCCESS = '$END$/$KEBAB$_SUCCESS';&#10;export const $ACTION$_ERROR = '$END$/$KEBAB$_ERROR';&#10;&#10;&#10;export const $CAMEL$Start = data =&gt; ({&#10;  type: $ACTION$_START, data,&#10;});&#10;&#10;export const $CAMEL$Success = data =&gt; ({&#10;  type: $ACTION$_SUCCESS, data,&#10;});&#10;&#10;export const $CAMEL$Error = data =&gt; ({&#10;  type: $ACTION$_ERROR, data,&#10;});&#10;" description="Redux Start, Success, Error Actions" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEBAB" expression="lowercaseAndDash(ACTION)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAMEL" expression="camelCase(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="resel" value="import { createSelector } from 'reselect';&#10;&#10;const $FUNC_NAME$ = createSelector([&#10;  $SELECTOR$,&#10;], (&#10;  $SELECTOR_RETURN$&#10;) =&gt; {&#10;  $END$&#10;});&#10;&#10;export default $FUNC_NAME$;&#10;" description="Create Reselect Selector" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR_RETURN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="presel" value="import { createSelector } from 'reselect';&#10;&#10;const $FUNC_NAME$ = createSelector([&#10;  $SELECTOR$,&#10;  (state, props) =&gt; props?.$PROPS_VAR$,&#10;], (&#10;  $SELECTOR_RETURN$&#10;) =&gt; {&#10;  $END$&#10;});&#10;&#10;export default $FUNC_NAME$;&#10;" description="Create Reselect Selector with props" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PROPS_VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTOR_RETURN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>