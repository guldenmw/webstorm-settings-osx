<templateSet group="user">
  <template name="rccp" value="import React, { Component } from 'react';&#10;&#10;interface IProps {&#10;  [x: string]: any;&#10;}&#10;&#10;interface IState {&#10;  [x: string]: any;&#10;}&#10;&#10;export default class ComponentName extends Component&lt;IProps, IState&gt; {&#10;  state = {};&#10;&#10;  constructor(props) {&#10;    super(props);&#10;  }&#10;&#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;}" description="React Typescript class component template" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="styled" value="import styled from 'styled-components'&#10;&#10;export const $STYLEDVAR$ = styled.div`&#10;  $END$&#10;`&#10;" description="Typescript Styled Component Template" toReformat="false" toShortenFQNames="true">
    <variable name="STYLEDVAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="container" value="import { IApplicationState } from '~/core/reducer';&#10;&#10;export const mapStateToProps = (state: IApplicationState) =&gt; {&#10;  const {&#10;&#10;  } = state;&#10;&#10;  return {};&#10;};&#10;&#10;export const mapDispatchToProps = dispatch =&gt; ({&#10;  someFunction(data) {&#10;    dispatch(someFunction(data));&#10;  },&#10;});&#10;" description="Redux typescript container boilerplate" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sfc" value="import React, { FC } from 'react'&#10;&#10;interface I$COMPONENT_NAME$Props {&#10;  [x: string]: any&#10;}&#10;&#10;const $COMPONENT_NAME$: FC&lt;I$COMPONENT_NAME$Props&gt; = (props) =&gt; {&#10;  const { $END$ } = props&#10;  return (&#10;    &lt;div&gt;&#10;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;$COMPONENT_NAME$.defaultProps = {}&#10;&#10;export default $COMPONENT_NAME$&#10;" description="TypeScript React Stateless Component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="fileNameWithoutExtension()" defaultValue="ComponentName" alwaysStopAt="false" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sfac" value="import React, { useState, useEffect, FC } from 'react';&#10;&#10;interface IComponentProps {&#10;  [x: string]: any;&#10;}&#10;&#10;interface IContainerProps {&#10;  token?: string;&#10;}&#10;&#10;type IProps = IComponentProps &amp; IContainerProps;&#10;&#10;const $COMPONENT_NAME$: FC&lt;IProps&gt; = (props) =&gt; {&#10;  const { } = props;&#10;  &#10;  $END$&#10;&#10;  const [isLoading, setLoadingState] = useState(false);&#10;  const [hasError, setErrorState] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    async function run() {&#10;      const { token } = props;&#10;      try {&#10;        setLoadingState(true);&#10;        /* Run async actions here */&#10;        setLoadingState(false);&#10;      } catch (ex) {&#10;        console.log('Error fetching data: ', ex);&#10;        setLoadingState(false);&#10;        setErrorState(true);&#10;      }&#10;    }&#10;    run();&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&lt;div&gt;Loading...&lt;/div&gt;);&#10;  }&#10;&#10;  if (hasError) {&#10;    return &lt;div&gt;An error has occurred!&lt;/div&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div&gt;&#10;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;$COMPONENT_NAME$.defaultProps = {&#10;  palette: 'primary',&#10;  token: '',&#10;};&#10;&#10;export default $COMPONENT_NAME$;&#10;" description="Stateless Functional Async Component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="ComponentName" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="component" value="import React, { useState, FunctionComponent } from 'react';&#10;&#10;interface IProps {&#10;  palette?: string;&#10;}&#10;&#10;interface IState {&#10;  [x: string]: any;&#10;}&#10;&#10;const MyComponent: FunctionComponent&lt;IProps&gt; = (props) =&gt; {&#10;  const [state, setState]: [IState, (...args) =&gt; any] = useState({});&#10;&#10;  const {} = props;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;MyComponent.defaultProps = {&#10;  palette: 'primary',&#10;}&#10;&#10;export default MyComponent;" description="React hooks functional component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="hook:state" value="const [state, setState]: [IState, (...args) =&gt; any] = useState({&#10;  &#10;});" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="api" value="import { axios } from 'helpers'&#10;&#10;export enum $MODULE$ {&#10;  $ENDPOINT_NAME$ = '',&#10;}&#10;&#10;interface $INPUT_INTERFACE$ {}&#10;interface $REPONSE_INTERFACE$ {}&#10;&#10;/**&#10; * $NAME_DESC$ request&#10; */&#10;export const $NAME$Request = async (&#10;  data: $INPUT_INTERFACE$,&#10;): Promise&lt;$REPONSE_INTERFACE$&gt; =&gt; {&#10;  return axios.post($MODULE$.$ENDPOINT$, data)&#10;}&#10;" description="API request boilerplate with imports" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT" expression="ENDPOINT_NAME" defaultValue="" alwaysStopAt="false" />
    <variable name="REPONSE_INTERFACE" expression="concat(concat(&quot;I&quot;, capitalize(NAME)), &quot;Response&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_DESC" expression="capitalize(underscoresToSpaces(snakeCase(NAME)))" defaultValue="" alwaysStopAt="false" />
    <variable name="INPUT_INTERFACE" expression="concat(concat(&quot;I&quot;, capitalize(NAME)), &quot;Input&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="MODULE" expression="capitalize(concat(regularExpression(fileRelativePath(), &quot;.*[/]([a-z]+?)(?=[/]api).*&quot;, &quot;$1&quot;), &quot;Api&quot;))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="test" value="describe('$MODULE_BEING_TESTED$', () =&gt; {&#10;  it('should $TEST_EXPECTATION$', () =&gt; {&#10;    const testData = ''&#10;    const expectedResponse = ''&#10;&#10;    expect($FUNCTION$(testData$END$)).toEqual(expectedResponse)&#10;  })&#10;})" description="Jest test boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODULE_BEING_TESTED" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TEST_EXPECTATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="vlog" value="console.log('$VARSTRING$: ', $VAR$)" description="Log a variable to console" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARSTRING" expression="" defaultValue="VAR" alwaysStopAt="false" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="callback" value="const $NAME$ = useCallback(() =&gt; {&#10;  $END$&#10;}, [$DEPS$])" description="Create a useCallback function" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="effect" value="useEffect(() =&gt; {&#10;  $END$&#10;}, [$DEPS$])" description="Create a useEffect function" toReformat="false" toShortenFQNames="true">
    <variable name="DEPS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="debug" value="console.log('--debug: $MESSAGE$')" description="Log a debug message to console" toReformat="false" toShortenFQNames="true">
    <variable name="MESSAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_CLASS" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="memo" value="const $NAME$ = useMemo(() =&gt; {&#10;  $END$&#10;}, [$DEPS$])" description="Create a useMemo function" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="mstp" value="export const mapStateToProps = (state: IApplicationState) =&gt; {&#10;  const $RESULT$ = $END$(state);&#10;&#10;  return {&#10;    $RESULT$,&#10;  };&#10;};" description="mapStateToProps boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="RESULT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ustt" value="const [$VAR$, set$CAPVAR$] = useState&lt;$TYPE$&gt;($END$)" description="React useState Hook" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAPVAR" expression="capitalize(VAR)" defaultValue="" alwaysStopAt="false" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ust" value="const [$VAR$, set$CAPVAR$] = useState($END$)" description="React useState Hook" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAPVAR" expression="capitalize(VAR)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="muisth" value="import { makeStyles, Theme } from '@material-ui/core/styles';&#10;&#10;export const useStyles = makeStyles((theme: Theme) =&gt; ({&#10;  $VAR$: {&#10;    $END$,&#10;  }&#10;}))&#10;" description="Material UI Make Styles container with theme propr" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="muis" value="import { makeStyles } from '@material-ui/core/styles';&#10;&#10;export const useStyles = makeStyles({&#10;  $VAR$: {&#10;    $END$,&#10;  }&#10;})&#10;" description="Material UI Make Styles container" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="act" value="export const $ACTION$ = '$KEBAB$';&#10;" description="React Action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEBAB" expression="lowercaseAndDash(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsfc" value="import React from 'react'&#10;&#10;const $COMPONENT_NAME$ = (props) =&gt; {&#10;  const { $END$ } = props&#10;  return (&#10;    &lt;div&gt;&#10;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;$COMPONENT_NAME$.defaultProps = {}&#10;&#10;export default $COMPONENT_NAME$&#10;" description="JavaScript React Stateless Component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="ComponentName" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="jmstp" value="export const mapStateToProps = (state) =&gt; {&#10;  const $RESULT$ = $END$(state)&#10;&#10;  return {&#10;    $RESULT$,&#10;  }&#10;}" description="mapStateToProps boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="RESULT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
    </context>
  </template>
  <template name="jreducer" value="// import {&#10;&#10;// } from '../actions'&#10;&#10;const initialState = {}&#10;&#10;const $REDUCER_NAME$ = (state = initialState, action) =&gt; {&#10;  const { type, data } = action&#10;  switch (type) {&#10;    default:&#10;      return state&#10;  }&#10;}&#10;&#10;export default $REDUCER_NAME$&#10;" description="redux reducer" toReformat="false" toShortenFQNames="true">
    <variable name="REDUCER_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
    </context>
  </template>
  <template name="wrap" value="&lt;$ELEMENT$&gt;&#10;  $SELECTION$&#10;&lt;/$ELEMENT$&gt;" description="Wrap selected in element" toReformat="false" toShortenFQNames="true">
    <variable name="ELEMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JSX_HTML" value="true" />
    </context>
  </template>
  <template name="gapi" value="import { axios } from 'helpers'&#10;&#10;export enum $MODULE$ {&#10;  $ENDPOINT_NAME$ = '',&#10;}&#10;&#10;interface $REPONSE_INTERFACE$ {}&#10;&#10;/**&#10; * $NAME_DESC$ request&#10; */&#10;export const $NAME$Request = async (): Promise&lt;$REPONSE_INTERFACE$&gt; =&gt; {&#10;  return axios.get($MODULE$.$ENDPOINT$)&#10;}&#10;" description="API GET request boilerplate" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT" expression="ENDPOINT_NAME" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_DESC" expression="capitalize(underscoresToSpaces(snakeCase(NAME)))" defaultValue="" alwaysStopAt="false" />
    <variable name="REPONSE_INTERFACE" expression="concat(concat(&quot;I&quot;, capitalize(NAME)), &quot;Response&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="MODULE" expression="capitalize(concat(regularExpression(fileRelativePath(), &quot;.*[/]([a-z]+?)(?=[/]api).*&quot;, &quot;$1&quot;), &quot;Api&quot;))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gsapi" value="interface $REPONSE_INTERFACE$ {}&#10;&#10;/**&#10; * $NAME_DESC$ request&#10; */&#10;export const $NAME$Request = async (): Promise&lt;$REPONSE_INTERFACE$&gt; =&gt; {&#10;  return axios.get($MODULE$.$ENDPOINT$)&#10;}&#10;" description="Single GET API request boilerplate" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT" expression="ENDPOINT_NAME" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_DESC" expression="capitalize(underscoresToSpaces(snakeCase(NAME)))" defaultValue="" alwaysStopAt="false" />
    <variable name="REPONSE_INTERFACE" expression="concat(concat(&quot;I&quot;, capitalize(NAME)), &quot;Response&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="MODULE" expression="concat(regularExpression(fileRelativePath(), &quot;.*[/]([a-z]+?)(?=[/]api).*&quot;, &quot;$1&quot;), &quot;Api&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>